{
  "pattern": {
    "name": {
      "ru": "Посредник",
      "en": "Mediator"
    },
    "type": "Поведенческий паттерн проектирования",
    "core_idea": "Вместо того чтобы объекты взаимодействовали напрямую друг с другом, они общаются через посредника. Посредник управляет логикой взаимодействия, что позволяет изменять и расширять взаимодействия без изменения самих объектов.",
    "description": {
      "main": "Паттерн Посредник (Mediator) — это поведенческий паттерн проектирования, который определяет объект-посредник для инкапсуляции взаимодействий между множеством объектов.",
      "detailed": "Посредник способствует слабой связанности, удерживая объекты от необходимости явно ссылаться друг на друга, что упрощает сопровождение и расширение системы.",
      "bullets": []
    },
    "usage_scenarios": [
      "Много взаимосвязанных классов: Когда классы взаимодействуют между собой, создавая сложную сеть зависимостей.",
      "Снижение связанности: Когда необходимо уменьшить количество прямых зависимостей между классами.",
      "Централизация управления взаимодействиями: Когда нужно централизовать логику взаимодействия для упрощения сопровождения и расширения системы.",
      "Гибкость в изменении взаимодействий: Когда требуется легко менять или добавлять новые виды взаимодействий между объектами."
    ],
    "structure": {
      "components": [
        {
          "name": "Mediator",
          "description": "Интерфейс посредника, определяющий методы для взаимодействия с компонентами",
          "methods": [
            "register(User user) - регистрация компонента",
            "sendMessage(String message, User user) - отправка сообщения"
          ]
        },
        {
          "name": "ConcreteMediator",
          "description": "Конкретная реализация посредника (например, ChatRoom)",
          "methods": [
            "register(User user) - реализация регистрации",
            "sendMessage(String message, User user) - реализация отправки сообщений"
          ]
        },
        {
          "name": "Colleague",
          "description": "Базовый класс/интерфейс для компонентов (например, User)",
          "methods": [
            "setMediator(Mediator mediator) - установка посредника",
            "send(String message) - отправка сообщения через посредника",
            "receive(String message) - получение сообщения"
          ]
        },
        {
          "name": "ConcreteColleague",
          "description": "Конкретные реализации компонентов",
          "methods": []
        }
      ]
    },
    "implementation": {
      "general": "Паттерн реализуется через создание центрального объекта-посредника, который управляет всеми взаимодействиями между компонентами.",
      "steps": [
        "Создайте интерфейс Посредника с методами для взаимодействия с компонентами",
        "Реализуйте конкретного посредника с логикой управления взаимодействиями",
        "Создайте классы компонентов, которые будут общаться через посредника",
        "Измените компоненты так, чтобы они вызывали методы посредника вместо прямого взаимодействия с другими компонентами",
        "Настройте связи между компонентами и посредником (обычно через конструкторы или set-методы)"
      ]
    },
    "examples": [
      {
        "name": "Интерфейс Mediator",
        "description": "Базовый интерфейс для посредника",
        "code": "public interface Mediator {\n    void register(User user);\n    void sendMessage(String message, User user);\n}"
      },
      {
        "name": "Класс ChatRoom",
        "description": "Конкретная реализация посредника для чат-комнаты",
        "code": "public class ChatRoom implements Mediator {\n    private List<User> users;\n\n    public ChatRoom() {\n        users = new ArrayList<>();\n    }\n\n    @Override\n    public void register(User user) {\n        if(!users.contains(user)){\n            users.add(user);\n            user.setMediator(this);\n            System.out.println(user.getName() + \" присоединился к чат-комнате.\");\n        }\n    }\n\n    @Override\n    public void sendMessage(String message, User sender) {\n        for(User user : users){\n            // Не отправлять сообщение отправителю\n            if(user != sender){\n                user.receive(message);\n            }\n        }\n    }\n}"
      },
      {
        "name": "Класс User",
        "description": "Компонент системы - пользователь чата",
        "code": "public class User {\n    private String name;\n    private Mediator mediator;\n\n    public User(String name){\n        this.name = name;\n    }\n\n    public void setMediator(Mediator mediator){\n        this.mediator = mediator;\n    }\n\n    public String getName(){\n        return name;\n    }\n\n    public void send(String message){\n        System.out.println(this.name + \" отправил сообщение: \" + message);\n        mediator.sendMessage(message, this);\n    }\n\n    public void receive(String message){\n        System.out.println(this.name + \" получил сообщение: \" + message);\n    }\n}"
      },
      {
        "name": "Пример использования",
        "description": "Демонстрация работы чат-комнаты с посредником",
        "code": "public class Main {\n    public static void main(String[] args) {\n        Mediator chatRoom = new ChatRoom();\n\n        User alice = new User(\"Alice\");\n        User bob = new User(\"Bob\");\n        User charlie = new User(\"Charlie\");\n\n        chatRoom.register(alice);\n        chatRoom.register(bob);\n        chatRoom.register(charlie);\n\n        alice.send(\"Привет всем!\");\n        bob.send(\"Привет, Alice!\");\n        charlie.send(\"Здравствуйте!\");\n    }\n}"
      }
    ],
    "analogies": [
      "Как диспетчер в аэропорту, который координирует движение самолетов без их прямого взаимодействия друг с другом.",
      "Как администратор чата, который передает сообщения между участниками, не позволяя им общаться напрямую."
    ],
    "pros": [
      "Устраняет зависимости между компонентами, позволяя повторно их использовать.",
      "Упрощает взаимодействие между компонентами.",
      "Централизует управление в одном месте."
    ],
    "cons": [
      "Посредник может сильно раздуться и легко превратиться в God-класс.",
      "Между Mediator и Observer по началу сложно уловить разницу."
    ],
    "comparison": {
      "title": "Сравнение с паттерном Observer",
      "items": [
        {
          "name": "Observer",
          "description": "Паттерн Observer нужен когда мы хотим, чтобы на изменение одного объекта реагировало множество других объектов. При этом мы не хотим, что этот объект-издатель знал о подписчиках. Связь односторонняя - подписчики знают об издателе, но издатель не знает о подписчиках."
        },
        {
          "name": "Mediator",
          "description": "Паттерн Mediator позволяет вынести обоюдные связи множества объектов в отдельный класс. Все объекты знают только о mediator'е, но не друг о друге. Mediator можно представить в виде шины общения - все знают о mediator'e, внутри него происходит связь (обычно двусторонняя)."
        }
      ]
    },
    "conclusion": "Паттерн Посредник особенно полезен в системах с большим количеством тесно связанных классов, где необходимо уменьшить сложность взаимодействий. Он помогает организовать четкую структуру коммуникации между объектами, но требует осторожности при реализации, чтобы посредник не стал слишком сложным и монолитным.",
    "sources": []
  }
}