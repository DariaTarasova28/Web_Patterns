{
  "pattern": {
    "name": {
      "ru": "Мост",
      "en": "Bridge"
    },
    "type": "Структурный",
    "core_idea": "Разделение функциональности на две независимые части: абстракцию и реализацию, что позволяет изменять или расширять одну часть без влияния на другую.",
    "description": {
      "main": "Мост — это структурный паттерн проектирования, который разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию, позволяя изменять их независимо друг от друга.",
      "detailed": "В разработке программного обеспечения часто возникает необходимость создавать системы, которые могут изменяться независимо от других компонентов. Паттерн проектирования Мост (Bridge) помогает разделить абстракцию и её реализацию, позволяя изменять их независимо друг от друга. Это особенно полезно в сложных системах, где требуется гибкость и расширяемость.",
      "bullets": [
        "Абстракция (Abstraction): Определяет высокоуровневую часть интерфейса и содержит ссылку на объект реализации",
        "Реализация (Implementor): Определяет низкоуровневую часть интерфейса, которая выполняет конкретные действия",
        "Позволяет изменять абстракции и реализации независимо, повышая гибкость и уменьшая связанность системы"
      ]
    },
    "usage_scenarios": [
      "Когда необходимо разделить абстракцию и реализацию так, чтобы изменения в одной части не влияли на другую",
      "Когда есть несколько вариаций абстракций и реализаций, которые нужно сочетать",
      "Когда требуется возможность динамического изменения реализации во время выполнения"
    ],
    "structure": {
      "components": [
        {
          "name": "Абстракция (Abstraction)",
          "description": "Определяет высокоуровневый интерфейс и содержит ссылку на объект реализации",
          "methods": []
        },
        {
          "name": "Реализация (Implementor)",
          "description": "Определяет интерфейс для конкретных реализаций",
          "methods": []
        }
      ]
    },
    "implementation": {
      "general": "Процесс реализации паттерна Мост:",
      "steps": [
        "Определить два непересекающихся измерения в классах (функциональность/платформа, интерфейс/реализация)",
        "Описать операции для клиентов в базовом классе абстракции",
        "Выделить общий интерфейс реализации на основе поведения, доступного на всех платформах",
        "Создать классы конкретной реализации для каждой платформы, следующие общему интерфейсу",
        "Добавить в класс абстракции ссылку на объект реализации",
        "Реализовать методы абстракции, делегируя работу связанному объекту реализации",
        "При необходимости создать подклассы для вариаций абстракции",
        "Связать абстракцию и реализацию через конструктор в клиентском коде"
      ]
    },
    "examples": [
      {
        "name": "Система фигур различного окраса",
        "description": "Создание набора фигур (Rectangle, Triangle) с разными цветами (RedColor, GreenColor, BlackColor). Паттерн Мост разделяет абстракцию фигуры и реализацию цвета.",
        "code": "public abstract class Shape {\n    protected Color color;\n\n    public Shape(Color color) {\n        this.color = color;\n    }\n\n    public abstract void draw();\n}\n\npublic interface Color {\n    void fillColor();\n}\n\npublic class BlackColor implements Color {\n    @Override\n    public void fillColor() {\n        System.out.println(\"Filling in black color\");\n    }\n}\n\npublic class Rectangle extends Shape {\n    public Rectangle(Color color) {\n        super(color);\n    }\n\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing rectangle\");\n        color.fillColor();\n    }\n}\n\n// Пример использования:\nShape rect = new Rectangle(new RedColor());\nrect.draw();"
      },
      {
        "name": "JDBC",
        "description": "JDBC разделяет абстракцию (интерфейс JDBC) и реализации (драйверы разных СУБД). Интерфейс остается прежним для пользователя независимо от используемого драйвера.",
        "code": ""
      }
    ],
    "analogies": [
      "Как мост соединяет два берега реки, позволяя им развиваться независимо, так и паттерн Мост соединяет абстракцию и реализацию",
      "Подобно тому, как пульт дистанционного управления (абстракция) работает с разными телевизорами (реализация)"
    ],
    "pros": [
      "Разделение абстракции и реализации: независимые изменения и расширения",
      "Гибкость: легкое добавление новых абстракций и реализаций",
      "Снижение связанности: уменьшение зависимости между компонентами",
      "Повторное использование кода: комбинирование абстракций и реализаций"
    ],
    "cons": [
      "Сложность: увеличивает количество классов и интерфейсов",
      "Увеличение количества кода: требуется дополнительный код",
      "Непрямой доступ: может ограничивать возможности клиента"
    ],
    "conclusion": "Паттерн Мост является мощным инструментом для создания гибких и расширяемых систем. В стандартной библиотеке Java он реализован в таких компонентах, как Swing и JDBC. Однако, как и любой паттерн, он должен применяться там, где это действительно необходимо, чтобы избежать избыточной сложности системы.",
    "sources": [
      "Стандартная библиотека Java (Swing, JDBC)",
      "Приемы объектно-ориентированного проектирования. Паттерны проектирования (Э. Гамма и др.)"
    ]
  }
}